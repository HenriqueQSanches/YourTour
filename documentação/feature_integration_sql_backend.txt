================================================================================
                    DOCUMENTA√á√ÉO DA BRANCH: feature/integration_sql_backend
================================================================================

DATA: 29/09/2025
DESCRI√á√ÉO: Implementa√ß√£o de banco de dados SQLite para gerenciamento de usu√°rios
AUTORES: Henrique Q. Sanches e Rafael Ferreira Sanches Torres

================================================================================
RESUMO DAS IMPLEMENTA√á√ïES
================================================================================

Esta branch implementa um sistema completo de banco de dados SQLite para o 
aplicativo YourTour, permitindo o gerenciamento de usu√°rios com opera√ß√µes 
CRUD (Create, Read, Update, Delete) integradas √†s telas de login e cadastro.

================================================================================
ARQUIVOS CRIADOS/MODIFICADOS
================================================================================

1. DEPEND√äNCIAS
   - pubspec.yaml: Adicionadas depend√™ncias sqflite e path

2. MODELO DE DADOS
   - lib/models/user.dart: Classe User com todas as propriedades especificadas
     * userId (PK - Primary Key)
     * userName
     * userEmail
     * userPhone
     * userBirth
     * userGender
     * userCountry
     * userPassword

3. BANCO DE DADOS
   - lib/database/database_helper.dart: Classe para gerenciamento do SQLite
     * Cria√ß√£o autom√°tica da tabela users
     * Opera√ß√µes CRUD b√°sicas
     * Valida√ß√£o de email √∫nico
     * Gerenciamento de conex√µes

4. SERVI√áOS
   - lib/services/user_service.dart: Camada de servi√ßo para opera√ß√µes de usu√°rio
     * Valida√ß√£o de dados
     * Tratamento de erros
     * Autentica√ß√£o de usu√°rios
     * Verifica√ß√£o de email existente

5. TELAS ATUALIZADAS
   - lib/cadastro_screen.dart: Integra√ß√£o com banco de dados
     * Salvamento de novos usu√°rios
     * Valida√ß√£o de dados
     * Feedback visual de carregamento
     * Tratamento de erros

   - lib/login_screen.dart: Integra√ß√£o com banco de dados
     * Autentica√ß√£o de usu√°rios
     * Verifica√ß√£o de credenciais
     * Feedback visual de carregamento
     * Tratamento de erros

6. EXEMPLOS
   - lib/examples/database_usage_example.dart: Exemplos de uso do banco de dados

================================================================================
FUNCIONALIDADES IMPLEMENTADAS
================================================================================

1. CRIA√á√ÉO DE USU√ÅRIOS
   - Valida√ß√£o de dados obrigat√≥rios
   - Verifica√ß√£o de email √∫nico
   - Criptografia de senha (b√°sica)
   - Feedback de sucesso/erro

2. AUTENTICA√á√ÉO
   - Login com email e senha
   - Verifica√ß√£o de credenciais
   - Valida√ß√£o de CAPTCHA
   - Feedback de autentica√ß√£o

3. VALIDA√á√ïES
   - Nome m√≠nimo de 3 caracteres
   - Email com formato v√°lido
   - Telefone com tamanho m√≠nimo
   - Senha m√≠nima de 6 caracteres
   - Confirma√ß√£o de senha
   - Aceite de termos e condi√ß√µes

4. OPERA√á√ïES DO BANCO
   - Inserir usu√°rio
   - Buscar usu√°rio por ID
   - Buscar usu√°rio por email
   - Buscar todos os usu√°rios
   - Atualizar usu√°rio
   - Deletar usu√°rio
   - Verificar exist√™ncia de email

================================================================================
ESTRUTURA DO BANCO DE DADOS
================================================================================

TABELA: users
- userId: INTEGER PRIMARY KEY AUTOINCREMENT
- userName: TEXT NOT NULL
- userEmail: TEXT NOT NULL UNIQUE
- userPhone: TEXT NOT NULL
- userBirth: TEXT NOT NULL
- userGender: TEXT NOT NULL
- userCountry: TEXT NOT NULL
- userPassword: TEXT NOT NULL

================================================================================
DEPEND√äNCIAS ADICIONADAS
================================================================================

- sqflite: ^2.3.0 (Banco de dados SQLite para Flutter)
- path: ^1.8.3 (Manipula√ß√£o de caminhos de arquivo)

================================================================================
MELHORIAS DE UX IMPLEMENTADAS
================================================================================

1. INDICADORES DE CARREGAMENTO
   - Spinner durante opera√ß√µes de banco
   - Bot√µes desabilitados durante processamento

2. FEEDBACK VISUAL
   - SnackBars para sucesso/erro
   - Mensagens espec√≠ficas para cada tipo de erro
   - Valida√ß√£o em tempo real

3. TRATAMENTO DE ERROS
   - Captura de exce√ß√µes
   - Mensagens de erro amig√°veis
   - Recupera√ß√£o de estado em caso de falha

================================================================================
PR√ìXIMOS PASSOS SUGERIDOS
================================================================================

1. IMPLEMENTA√á√ïES FUTURAS
   - Criptografia de senhas com hash
   - Sess√£o de usu√°rio persistente
   - Recupera√ß√£o de senha
   - Perfil de usu√°rio
   - Hist√≥rico de atividades

2. MELHORIAS DE SEGURAN√áA
   - Valida√ß√£o de entrada mais robusta
   - Sanitiza√ß√£o de dados
   - Rate limiting para tentativas de login
   - Logs de auditoria

3. OTIMIZA√á√ïES
   - √çndices no banco de dados
   - Cache de usu√°rios frequentes
   - Pagina√ß√£o para listas grandes
   - Backup autom√°tico

================================================================================
TESTES RECOMENDADOS
================================================================================

‚ö†Ô∏è  IMPORTANTE: SQLite N√ÉO funciona na web (Chrome/Firefox/Safari)
   Para testar o banco de dados, use APENAS:
   - Mobile (Android/iOS): flutter run
   - Desktop (Windows/Linux/macOS): flutter run -d windows

1. TESTES UNIT√ÅRIOS
   - Valida√ß√£o de dados do usu√°rio
   - Opera√ß√µes CRUD do banco
   - Autentica√ß√£o de usu√°rios

2. TESTES DE INTEGRA√á√ÉO
   - Fluxo completo de cadastro
   - Fluxo completo de login
   - Tratamento de erros

3. TESTES DE USABILIDADE
   - Experi√™ncia do usu√°rio
   - Performance com muitos usu√°rios
   - Responsividade da interface

4. COMO TESTAR CORRETAMENTE
   - Execute: flutter run -d windows (para Windows)
   - Execute: flutter run -d linux (para Linux)
   - Execute: flutter run -d macos (para macOS)
   - Execute: flutter run (para mobile se conectado)
   - NUNCA use: flutter run -d chrome (SQLite n√£o funciona na web)

================================================================================
NOTAS T√âCNICAS
================================================================================

- O banco de dados √© criado automaticamente na primeira execu√ß√£o
- Arquivo do banco: youtour.db
- Localiza√ß√£o: Diret√≥rio de dados do aplicativo
- Vers√£o do banco: 1
- Suporte a migra√ß√µes futuras implementado

================================================================================
LIMITA√á√ïES E COMPATIBILIDADE
================================================================================

‚ö†Ô∏è  SQLite N√ÉO FUNCIONA NA WEB
- Chrome, Firefox, Safari: SQLite n√£o √© suportado
- Erro comum: "databaseFactory not initialized"
- Solu√ß√£o: Use mobile ou desktop para testar

‚úÖ  PLATAFORMAS SUPORTADAS
- Android: Funciona perfeitamente
- iOS: Funciona perfeitamente  
- Windows: Funciona perfeitamente
- Linux: Funciona perfeitamente
- macOS: Funciona perfeitamente

üîß  COMANDOS CORRETOS PARA TESTAR
- Windows: flutter run -d windows
- Linux: flutter run -d linux
- macOS: flutter run -d macos
- Mobile: flutter run (se dispositivo conectado)
- Web: N√ÉO RECOMENDADO (SQLite n√£o funciona)

================================================================================
TUTORIAL PASSO A PASSO - IMPLEMENTA√á√ÉO COMPLETA
================================================================================

Ol√°! Aqui est√° um guia detalhado de como implementamos o banco de dados SQLite 
no projeto YourTour. Vou te ensinar exatamente o que fizemos e como voc√™ pode 
replicar isso no seu projeto.

================================================================================
PASSO 1: CONFIGURAR AS DEPEND√äNCIAS
================================================================================

Primeiro, abrimos o arquivo pubspec.yaml e adicionamos as depend√™ncias 
necess√°rias para trabalhar com SQLite:

```yaml
dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.8
  sqflite: ^2.3.0      # ‚Üê Adicionamos esta linha
  path: ^1.8.3         # ‚Üê E esta tamb√©m
```

Depois executamos no terminal:
```bash
flutter pub get
```

================================================================================
PASSO 2: CRIAR O MODELO DE DADOS (User)
================================================================================

Criamos a pasta lib/models/ e o arquivo user.dart. Este √© o "molde" dos nossos 
usu√°rios no banco de dados:

```dart
class User {
  final int? userId;        // Chave prim√°ria (auto-incremento)
  final String userName;    // Nome do usu√°rio
  final String userEmail;   // Email (√∫nico)
  final String userPhone;   // Telefone
  final String userBirth;   // Data de nascimento
  final String userGender;  // G√™nero
  final String userCountry; // Pa√≠s
  final String userPassword; // Senha

  // Construtor
  User({
    this.userId,
    required this.userName,
    required this.userEmail,
    // ... outros campos obrigat√≥rios
  });

  // M√©todo para converter Map para User (do banco para objeto)
  factory User.fromMap(Map<String, dynamic> map) {
    return User(
      userId: map['userId'],
      userName: map['userName'],
      // ... mapear todos os campos
    );
  }

  // M√©todo para converter User para Map (do objeto para banco)
  Map<String, dynamic> toMap() {
    return {
      'userId': userId,
      'userName': userName,
      // ... mapear todos os campos
    };
  }
}
```

================================================================================
PASSO 3: CRIAR O HELPER DO BANCO DE DADOS
================================================================================

Criamos a pasta lib/database/ e o arquivo database_helper.dart. Esta classe √© 
respons√°vel por gerenciar a conex√£o com o banco e executar as opera√ß√µes SQL:

```dart
import 'dart:async';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import '../models/user.dart';

class DatabaseHelper {
  static final DatabaseHelper _instance = DatabaseHelper._internal();
  static Database? _database;

  // Singleton pattern - garante que s√≥ existe uma inst√¢ncia
  factory DatabaseHelper() {
    return _instance;
  }

  // M√©todo para obter a conex√£o com o banco
  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  // M√©todo para inicializar o banco
  Future<Database> _initDatabase() async {
    String path = join(await getDatabasesPath(), 'youtour.db');
    return await openDatabase(
      path,
      version: 1,
      onCreate: _onCreate,  // Chama quando cria o banco pela primeira vez
    );
  }

  // M√©todo que cria a tabela users
  Future<void> _onCreate(Database db, int version) async {
    await db.execute('''
      CREATE TABLE users(
        userId INTEGER PRIMARY KEY AUTOINCREMENT,
        userName TEXT NOT NULL,
        userEmail TEXT NOT NULL UNIQUE,
        userPhone TEXT NOT NULL,
        userBirth TEXT NOT NULL,
        userGender TEXT NOT NULL,
        userCountry TEXT NOT NULL,
        userPassword TEXT NOT NULL
      )
    ''');
  }

  // M√âTODOS CRUD (Create, Read, Update, Delete)

  // CREATE - Inserir usu√°rio
  Future<int> insertUser(User user) async {
    final db = await database;
    return await db.insert('users', user.toMap());
  }

  // READ - Buscar todos os usu√°rios
  Future<List<User>> getAllUsers() async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query('users');
    return List.generate(maps.length, (i) {
      return User.fromMap(maps[i]);
    });
  }

  // READ - Buscar usu√°rio por email
  Future<User?> getUserByEmail(String email) async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'users',
      where: 'userEmail = ?',
      whereArgs: [email],
    );
    if (maps.isNotEmpty) {
      return User.fromMap(maps.first);
    }
    return null;
  }

  // UPDATE - Atualizar usu√°rio
  Future<int> updateUser(User user) async {
    final db = await database;
    return await db.update(
      'users',
      user.toMap(),
      where: 'userId = ?',
      whereArgs: [user.userId],
    );
  }

  // DELETE - Deletar usu√°rio
  Future<int> deleteUser(int userId) async {
    final db = await database;
    return await db.delete(
      'users',
      where: 'userId = ?',
      whereArgs: [userId],
    );
  }
}
```

================================================================================
PASSO 4: CRIAR A CAMADA DE SERVI√áOS
================================================================================

Criamos a pasta lib/services/ e o arquivo user_service.dart. Esta classe 
"envolve" o DatabaseHelper com valida√ß√µes e tratamento de erros:

```dart
import '../models/user.dart';
import '../database/database_helper.dart';

class UserService {
  final DatabaseHelper _databaseHelper = DatabaseHelper();

  // Criar usu√°rio com valida√ß√µes
  Future<int> createUser(User user) async {
    try {
      // Verificar se email j√° existe
      bool emailExists = await _databaseHelper.emailExists(user.userEmail);
      if (emailExists) {
        throw Exception('Email j√° cadastrado');
      }
      
      return await _databaseHelper.insertUser(user);
    } catch (e) {
      throw Exception('Erro ao criar usu√°rio: $e');
    }
  }

  // Autenticar usu√°rio (login)
  Future<User?> authenticateUser(String email, String password) async {
    try {
      User? user = await _databaseHelper.getUserByEmail(email);
      if (user != null && user.userPassword == password) {
        return user;
      }
      return null;
    } catch (e) {
      throw Exception('Erro ao autenticar usu√°rio: $e');
    }
  }

  // Validar dados do usu√°rio
  String? validateUserData(User user) {
    if (user.userName.isEmpty) {
      return 'Nome √© obrigat√≥rio';
    }
    if (user.userEmail.isEmpty || !user.userEmail.contains('@')) {
      return 'Email v√°lido √© obrigat√≥rio';
    }
    // ... outras valida√ß√µes
    return null;
  }
}
```

================================================================================
PASSO 5: INTEGRAR COM A TELA DE CADASTRO
================================================================================

Modificamos o arquivo lib/cadastro_screen.dart para usar o banco de dados:

1. Adicionamos os imports:
```dart
import 'models/user.dart';
import 'services/user_service.dart';
```

2. Adicionamos a inst√¢ncia do servi√ßo:
```dart
final UserService _userService = UserService();
bool _isLoading = false;
```

3. Modificamos o m√©todo _cadastrar():
```dart
void _cadastrar() async {
  if (_formKey.currentState!.validate()) {
    // ... valida√ß√µes existentes (CAPTCHA, termos, etc.)

    setState(() {
      _isLoading = true;  // Mostrar loading
    });

    try {
      // Criar objeto User com os dados do formul√°rio
      User newUser = User(
        userName: _nomeController.text,
        userEmail: _emailController.text,
        userPhone: _telefoneController.text,
        userBirth: _dataNascimentoController.text,
        userGender: _generoSelecionado!,
        userCountry: _paisSelecionado!,
        userPassword: _senhaController.text,
      );

      // Validar dados
      String? validationError = _userService.validateUserData(newUser);
      if (validationError != null) {
        // Mostrar erro de valida√ß√£o
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(validationError), backgroundColor: Colors.red),
        );
        return;
      }

      // Salvar no banco de dados
      int userId = await _userService.createUser(newUser);
      
      // Mostrar sucesso
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Cadastro realizado com sucesso!'),
          backgroundColor: Colors.green,
        ),
      );

      // Limpar formul√°rio e voltar para login
      _formKey.currentState!.reset();
      Navigator.pop(context);
      
    } catch (e) {
      // Mostrar erro
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Erro ao cadastrar: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() {
        _isLoading = false;  // Esconder loading
      });
    }
  }
}
```

4. Atualizamos o bot√£o para mostrar loading:
```dart
child: ElevatedButton(
  onPressed: _isLoading ? null : _cadastrar,  // Desabilitar durante loading
  child: _isLoading
      ? CircularProgressIndicator()  // Mostrar spinner
      : Text('CADASTRAR'),
),
```

================================================================================
PASSO 6: INTEGRAR COM A TELA DE LOGIN
================================================================================

Modificamos o arquivo lib/login_screen.dart de forma similar:

1. Adicionamos os imports e inst√¢ncia do servi√ßo:
```dart
import 'models/user.dart';
import 'services/user_service.dart';

final UserService _userService = UserService();
```

2. Modificamos o m√©todo _login():
```dart
void _login() async {
  if (_formKey.currentState!.validate()) {
    // ... valida√ß√µes existentes (CAPTCHA, etc.)

    setState(() {
      _isLoading = true;
    });

    try {
      // Autenticar usu√°rio no banco
      User? user = await _userService.authenticateUser(
        _emailController.text,
        _senhaController.text,
      );

      if (user != null) {
        // Login bem-sucedido
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Bem-vindo de volta, ${user.userName}!'),
            backgroundColor: Colors.green,
          ),
        );
        
        // Limpar campos
        _emailController.clear();
        _senhaController.clear();
        _captchaController.clear();
        
        // Navegar para pr√≥xima tela
        // Navigator.pushReplacement(...);
      } else {
        // Credenciais inv√°lidas
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Email ou senha incorretos'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      // Mostrar erro
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Erro ao fazer login: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }
}
```

================================================================================
PASSO 7: TESTAR A IMPLEMENTA√á√ÉO
================================================================================

‚ö†Ô∏è  IMPORTANTE: SQLite N√ÉO funciona na web!
   Para testar, use APENAS mobile ou desktop:

Para Windows:
```bash
flutter run -d windows
```

Para Linux:
```bash
flutter run -d linux
```

Para macOS:
```bash
flutter run -d macos
```

Para Mobile (Android/iOS):
```bash
flutter run
```

‚ùå N√ÉO USE: flutter run -d chrome (SQLite n√£o funciona na web)

1. Teste o cadastro:
   - Preencha todos os campos
   - Clique em "CADASTRAR"
   - Verifique se aparece a mensagem de sucesso

2. Teste o login:
   - Use o email e senha cadastrados
   - Clique em "ENTRAR"
   - Verifique se aparece a mensagem de boas-vindas

3. Teste valida√ß√µes:
   - Tente cadastrar com email duplicado
   - Tente fazer login com credenciais erradas
   - Verifique se as mensagens de erro aparecem

4. Verificar dados salvos:
   - Os dados ficam salvos no banco SQLite
   - Feche e abra o app novamente
   - Os dados continuam l√° (persist√™ncia)

================================================================================
DICAS IMPORTANTES
================================================================================

1. **SEMPRE use try-catch** ao trabalhar com banco de dados
2. **SEMPRE mostre feedback visual** (loading, mensagens de sucesso/erro)
3. **SEMPRE valide os dados** antes de salvar
4. **SEMPRE trate erros** de forma amig√°vel para o usu√°rio
5. **NUNCA** salve senhas em texto puro (use hash/criptografia)

================================================================================
ESTRUTURA FINAL DO PROJETO
================================================================================

lib/
‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îî‚îÄ‚îÄ user.dart                    # Modelo de dados
‚îú‚îÄ‚îÄ database/
‚îÇ   ‚îî‚îÄ‚îÄ database_helper.dart         # Gerenciamento do SQLite
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îî‚îÄ‚îÄ user_service.dart           # L√≥gica de neg√≥cio
‚îú‚îÄ‚îÄ examples/
‚îÇ   ‚îî‚îÄ‚îÄ database_usage_example.dart # Exemplos de uso
‚îú‚îÄ‚îÄ cadastro_screen.dart            # Tela de cadastro (atualizada)
‚îú‚îÄ‚îÄ login_screen.dart               # Tela de login (atualizada)
‚îî‚îÄ‚îÄ main.dart                       # Arquivo principal

================================================================================
PR√ìXIMOS PASSOS PARA MELHORAR
================================================================================

1. **Criptografar senhas** com bcrypt ou similar
2. **Adicionar sess√£o persistente** com SharedPreferences
3. **Implementar recupera√ß√£o de senha**
4. **Criar tela de perfil do usu√°rio**
5. **Adicionar valida√ß√µes mais robustas**
6. **Implementar backup do banco de dados**

================================================================================
CONTATO E SUPORTE
================================================================================

Para d√∫vidas sobre esta implementa√ß√£o, consulte:
- Documenta√ß√£o do SQLite: https://pub.dev/packages/sqflite
- Exemplos de uso: lib/examples/database_usage_example.dart
- C√≥digo fonte: lib/database/ e lib/services/

================================================================================
