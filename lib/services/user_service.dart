import '../models/user.dart';
import '../database/database_helper.dart';
import '../services/email_service.dart';
import '../utils/code_generator.dart';

class UserService {
  final DatabaseHelper _databaseHelper = DatabaseHelper();

  // Criar um novo usu√°rio
  Future<int> createUser(User user) async {
    try {
      print('üîµ [USER_SERVICE] Iniciando createUser para: ${user.userEmail}');
      
      // Verificar se o email j√° existe
      print('üîµ [USER_SERVICE] Verificando se email existe...');
      bool emailExists = await _databaseHelper.emailExists(user.userEmail);
      print('üîµ [USER_SERVICE] Email existe: $emailExists');
      
      if (emailExists) {
        print('üî¥ [USER_SERVICE] Email j√° cadastrado');
        throw Exception('Email j√° cadastrado');
      }
      
      print('üîµ [USER_SERVICE] Inserindo usu√°rio no banco...');
      int userId = await _databaseHelper.insertUser(user);
      print('üîµ [USER_SERVICE] Usu√°rio inserido com ID: $userId');
      
      return userId;
    } catch (e) {
      print('üî¥ [USER_SERVICE] Erro ao criar usu√°rio: $e');
      throw Exception('Erro ao criar usu√°rio: $e');
    }
  }

  // Buscar todos os usu√°rios
  Future<List<User>> getAllUsers() async {
    try {
      return await _databaseHelper.getAllUsers();
    } catch (e) {
      throw Exception('Erro ao buscar usu√°rios: $e');
    }
  }

  // Buscar usu√°rio por ID
  Future<User?> getUserById(int userId) async {
    try {
      return await _databaseHelper.getUserById(userId);
    } catch (e) {
      throw Exception('Erro ao buscar usu√°rio: $e');
    }
  }

  // Buscar usu√°rio por email
  Future<User?> getUserByEmail(String email) async {
    try {
      return await _databaseHelper.getUserByEmail(email);
    } catch (e) {
      throw Exception('Erro ao buscar usu√°rio por email: $e');
    }
  }

  // Atualizar usu√°rio
  Future<bool> updateUser(User user) async {
    try {
      if (user.userId == null) {
        throw Exception('ID do usu√°rio √© obrigat√≥rio para atualiza√ß√£o');
      }
      
      int result = await _databaseHelper.updateUser(user);
      return result > 0;
    } catch (e) {
      throw Exception('Erro ao atualizar usu√°rio: $e');
    }
  }

  // Deletar usu√°rio
  Future<bool> deleteUser(int userId) async {
    try {
      int result = await _databaseHelper.deleteUser(userId);
      return result > 0;
    } catch (e) {
      throw Exception('Erro ao deletar usu√°rio: $e');
    }
  }

  // Verificar se email existe
  Future<bool> emailExists(String email) async {
    try {
      return await _databaseHelper.emailExists(email);
    } catch (e) {
      throw Exception('Erro ao verificar email: $e');
    }
  }

  // Autenticar usu√°rio (login)
  Future<User?> authenticateUser(String email, String password) async {
    try {
      User? user = await getUserByEmail(email);
      if (user != null && user.userPassword == password && !user.isForget) {
        return user;
      }
      return null;
    } catch (e) {
      throw Exception('Erro ao autenticar usu√°rio: $e');
    }
  }

  // Solicitar reset de senha
  Future<bool> requestPasswordReset(String email) async {
    try {
      print('üîµ [USER_SERVICE] Iniciando reset de senha para: $email');
      
      // Validar formato do e-mail
      if (!EmailService.isValidEmail(email)) {
        throw Exception('Formato de e-mail inv√°lido');
      }
      
      // Verificar se o e-mail existe
      User? user = await getUserByEmail(email);
      if (user == null) {
        throw Exception('E-mail n√£o encontrado');
      }
      
      // Verificar se o usu√°rio j√° est√° em processo de reset
      if (user.isForget) {
        throw Exception('J√° existe uma solicita√ß√£o de reset pendente para este e-mail');
      }
      
      // Gerar c√≥digo e tempo de expira√ß√£o
      String resetCode = CodeGenerator.generateResetCode();
      String codeExpiry = CodeGenerator.generateExpiryTime();
      
      print('üîµ [USER_SERVICE] C√≥digo gerado: $resetCode');
      print('üîµ [USER_SERVICE] Expira em: $codeExpiry');
      
      // Atualizar banco de dados
      bool dbSuccess = await _databaseHelper.requestPasswordReset(email, resetCode, codeExpiry);
      if (!dbSuccess) {
        throw Exception('Erro ao atualizar dados no banco');
      }
      
      // Enviar e-mail
      bool emailSuccess = await EmailService.sendPasswordResetCode(email, resetCode);
      if (!emailSuccess) {
        // Se falhar o e-mail, limpar os dados de reset
        await _databaseHelper.clearResetData(email);
        throw Exception('Erro ao enviar e-mail');
      }
      
      print('‚úÖ [USER_SERVICE] Reset de senha solicitado com sucesso');
      return true;
    } catch (e) {
      print('üî¥ [USER_SERVICE] Erro ao solicitar reset de senha');
      throw Exception('Erro ao solicitar reset de senha');
    }
  }

  // Verificar c√≥digo de reset
  Future<bool> verifyResetCode(String email, String code) async {
    try {
      print('üîµ [USER_SERVICE] Verificando c√≥digo para: $email');
      
      // Validar formato do c√≥digo
      if (!CodeGenerator.isValidCodeFormat(code)) {
        throw Exception('Formato de c√≥digo inv√°lido');
      }
      
      // Verificar c√≥digo no banco
      bool isValid = await _databaseHelper.verifyResetCode(email, code);
      if (!isValid) {
        throw Exception('C√≥digo inv√°lido ou expirado');
      }
      
      print('‚úÖ [USER_SERVICE] C√≥digo verificado com sucesso');
      return true;
    } catch (e) {
      print('üî¥ [USER_SERVICE] Erro ao verificar c√≥digo: $e');
      throw Exception('Erro ao verificar c√≥digo: $e');
    }
  }

  // Redefinir senha
  Future<bool> resetPassword(String email, String newPassword) async {
    try {
      print('üîµ [USER_SERVICE] Redefinindo senha para: $email');
      
      // Validar nova senha
      if (newPassword.isEmpty || newPassword.length < 6) {
        throw Exception('Senha deve ter pelo menos 6 caracteres');
      }
      
      // Verificar se o usu√°rio est√° em processo de reset
      User? user = await getUserByEmail(email);
      if (user == null || !user.isForget) {
        throw Exception('Solicita√ß√£o de reset n√£o encontrada');
      }
      
      // Atualizar senha no banco
      bool success = await _databaseHelper.resetPassword(email, newPassword);
      if (!success) {
        throw Exception('Erro ao atualizar senha');
      }
      
      print('‚úÖ [USER_SERVICE] Senha redefinida com sucesso');
      return true;
    } catch (e) {
      print('üî¥ [USER_SERVICE] Erro ao redefinir senha: $e');
      throw Exception('Erro ao redefinir senha: $e');
    }
  }

  // Limpar dados de reset (para casos de erro ou cancelamento)
  Future<bool> clearResetData(String email) async {
    try {
      return await _databaseHelper.clearResetData(email);
    } catch (e) {
      print('üî¥ [USER_SERVICE] Erro ao limpar dados de reset: $e');
      return false;
    }
  }

  // Validar dados do usu√°rio
  String? validateUserData(User user) {
    if (user.userName.isEmpty) {
      return 'Nome √© obrigat√≥rio';
    }
    if (user.userEmail.isEmpty || !user.userEmail.contains('@')) {
      return 'Email v√°lido √© obrigat√≥rio';
    }
    if (user.userPhone.isEmpty) {
      return 'Telefone √© obrigat√≥rio';
    }
    if (user.userBirth.isEmpty) {
      return 'Data de nascimento √© obrigat√≥ria';
    }
    if (user.userGender.isEmpty) {
      return 'G√™nero √© obrigat√≥rio';
    }
    if (user.userCountry.isEmpty) {
      return 'Pa√≠s √© obrigat√≥rio';
    }
    if (user.userPassword == null || user.userPassword!.isEmpty || user.userPassword!.length < 6) {
      return 'Senha deve ter pelo menos 6 caracteres';
    }
    return null;
  }
}
